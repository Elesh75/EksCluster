apiVersion: v1
kind: ServiceAccount
metadata:
  name: cluster-autoscaler    # You must pass this service acc in your pod msnifest file for the pod to be able to use this service acc
  namespace: kube-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::411854276167:role/eks_autoscaller  # This is the arn of the role created

# This is our clusterrole and clusterrole binding for our autoscaler pod
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-autoscaler
rules:
  - apiGroups: [""]
    resources: ["pods/ststus"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["pods/eviction"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["watch", "list", "get", "update"]
  - apiGroups: [""]
    resources: ["na,espace", "replicationcontrollers", "pods", "services", "persistentvolumeclaims", "persistentvolumes"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["extensions"]
    resources: ["replicasets", "daemonsets"]
    verbs: ["watch", "list", "get"]
  - apiGroups: [""]
    resources: ["nodes/status"]
    verbs: ["patch"]
  - apiGroups: [""]
    resources: ["endpoints"]
    resourceNames: ["cluster-autoscaler"]
    verbs: ["get", "update"]
  - apiGroups: ["extensions", "policy"]
    resources: ["podsecuritypolicies"]
    resourceNames: ["privileged"]
    verbs: ["use"]
  - apiGroups: [""]
    resources: ["events", "endpoints"]
    verbs: ["create", "patch"]
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-autoscaler-binding
subjects:
  - kind: ServiceAccount
    name: cluster-autoscaler
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: cluster-autoscaler
  apiGroup: rbac.authorization.k8s.io


# cluster-autoscaler role and role-binding

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-autoscaler
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch", "create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cluster-autoscaler-status", "cluster-autoscaler-prority-expander"]
    verbs: ["get", "delete", "update", "watch"]
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-autoscaler-role-binding
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: cluster-autoscaler
    namespace: kube-system
roleRef:
  kind: Role
  name: cluster-autoscaler
  apiGroup: rbac.authorization.k8s.io

# cluster-autoscaler-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
    spec:
      serviceAccountName: cluster-autoscaler
      containers:
        - name: cluster-autoscaler
          image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.27.3 # Replace with the appropriate version
          command:
            - "./cluster-autoscaler"
            - "--v=4" # Set log verbosity as needed
            - "--stderrthreshold=info"
            - "--cloud-provider=aws" # Specify your cloud provider (e.g., aws, gce, azure)
            - "--skip-nodes-with-local-storage=false"
            - "--expander=least-waste"
            - "--node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/demo"  # This is the tag on our node group
            - "--balance-similar-node-groups"
            - "--skip-nodes-with-system-pods=false"
          resources:
            limits:
              cpu: 100m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 300Mi
          volumeMounts:
            - name: ssl-certs
              mountPath: /etc/ssl/ceerts/ca-certificates.crt
              readOnly: true
              imagePullPolicy: "Always"
          volumes:
            -name: ssl-certs
             hostPath:
                 path: "/etc/ssl/certs/ca-bundle.crt"

